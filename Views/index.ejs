<!-- Copyright (c) 2012 Mobile Developer Solutions -->
<!DOCTYPE HTML>
<html>
<head>
    <title>Automa by Daniel St. John</title>
    <meta charset="utf-8">
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"
            integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
    <script src="bootstrap-3.2.0/js/bootstrap.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>

    <style>

        a {
            color: #9acfea;
        }

        input[type=text], select {
            width: 76%;
            padding: 12px 20px;
            margin: 8px 0;
            display: inline-block;
            border: 1px solid #5cb85c;
            border-radius: 4px;
            box-sizing: border-box;
            background: #3c3c3c;
        }

        input[type=number], button {
            width: 76%;
            padding: 12px 20px;
            margin: 8px 0;
            display: inline-block;
            border: 1px solid #5cb85c;
            border-radius: 4px;
            box-sizing: border-box;
            background: #3c3c3c;
        }

        /* The Overlay (background) */
        .overlay {
            /* Height & width depends on how you want to reveal the overlay (see JS below) */
            height: 100%;
            width: 0;
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            background-color: rgb(0, 0, 0); /* Black fallback color */
            background-color: rgba(0, 0, 0, 0.6); /* Black w/opacity */
            overflow-x: hidden; /* Disable horizontal scroll */
            transition: 0.5s; /* 0.5 second transition effect to slide in or slide down the overlay (height or width, depending on reveal) */
        }

        /* Position the content inside the overlay */
        .overlay-content {
            position: relative;
            top: 9%; /* 25% from the top */
            /*width: 100%; !* 100% width *!*/
            /*text-align: left; !* Centered text/links *!*/
            /*margin-top: 10px; !* 30px top margin to avoid conflict with the close button on smaller screens *!*/
            argin-left: 0px;
            font-size: 24px;

            color: #F0F3F4;
        }

        /* The navigation links inside the overlay */
        .overlay {
            /*padding: 8px;*/
            /*text-decoration: none;*/
            /*font-size: 36px;*/
            /*color: #F0F3F4;*/
            /*display: block; !* Display block instead of inline *!*/
            /*transition: 0.3s; !* Transition effects on hover (color) *!*/
        }


        /* When you mouse over the navigation links, change their color */
        .overlay a:hover, .overlay a:focus {
            color: #ff0000;
        }

        /* Position the close button (top right corner) */
        .overlay .closebtn {
            position: absolute;
            top: 50px;
            right: 45px;
            font-size: 30px;
        }

        /* When the height of the screen is less than 450 pixels, change the font-size of the links and position the close button again, so they don't overlap */
        @media screen and (max-height: 450px) {
            .overlay a {
                font-size: 10px
            }

            .overlay .closebtn {
                font-size: 20px;
                top: 15px;
                right: 35px;
            }
        }

        .well {
            background: rgb(25, 38, 77);
        / / "FF0000";
        / / darkblue;
        / / "#334d99";
            width: 90%;
            font-size: 18px;
        }

    </style>


</head>
<body id="body" style="background: #85929E ">

<nav class="navbar navbar-inverse navbar-fixed-top">
    <!--    <div class="navbar-header">-->
    <!--        <a class="navbar-brand" href="#">Cellular Automa</a>-->
    <!--    </div>-->
    <ul class="nav navbar-nav">
        <li><a onclick="toggleRightMenu()"><span class="glyphicon glyphicon-th-list"></span> Menu</a></li>
        <li><a onclick="APP.Start( GetStepDelay() );"><span class="glyphicon glyphicon-play"></span> Start</a></li>
        <li><a onclick="APP.Next( );"><span class="glyphicon glyphicon-step-forward"></span> Next</a></li>
        <li><a onclick="APP.Stop();"><span class="glyphicon glyphicon-stop"></span> Stop</a></li>
        <li><a onclick="APP.Reset();"><span class="glyphicon glyphicon-refresh"></span> Reset</a></li>
        <li class=".float-right"><a id="toggleFullScene"> <span class="glyphicon  glyphicon-resize-full"
                                                                aria-hidden="true"/></a></li>
    </ul>


    <ul class="nav navbar-nav ml-auto">
        <li><a onclick=""> <span class="glyphicon glyphicon-asterisk"></span> Toggel</a></li>
    </ul>
</nav>

<!-- The overlay -->
<div id="myNav" class="overlay">
    <!-- Button to close the overlay navigation -->
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">close</a>
    <!-- Overlay content -->
    <div class="overlay-content">

        <div id="automa_options_container" style="margin-left: 5px">

            <div class="well">
                <label for="rules">Pre Defined <span class="glyphicon glyphicon-info-sign"/></label>
                <select id="rules" name="rule" onchange="manageRules()">
                    <option value="conway" selected>Conway</option>
                    <option value="brain">Brain&Vote</option>
                </select>


                <div>
                    <label for="defineAutoma">Define Your Automa <span class="glyphicon glyphicon-info-sign"/></label>
                </div>
                <div>
                    <button id="defineAutoma" type="button" class="btn btn-success">Define</button>
                </div>
            </div>


            <div class="well">
                <div>
                    <label for="stepDelay">Step Delay MS<span class="glyphicon glyphicon-info-sign"/></label>
                </div>
                <div>
                    <input id="stepDelay" value='500' type="number" id="quantity" name="stepDelay" min="0" max="3">
                </div>
            </div>

            <div class="well">

                <div>
                    <label for="dim">Dimension </label>
                </div>
                <div>
                    <select id="dim" name="dim" onchange="showCorrectDimensionList()">
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3" selected>3</option>
                        <option value="4">4</option>
                    </select>
                </div>
                <div>
                    <label for="topology">Topology <span class="glyphicon glyphicon-info-sign"/></label>
                </div>
                <div>
                    <select id="topology" name="topology">
                        <option value="Torus" selected>Torus</option>
                        <option value="Sphere">Sphere</option>
                        <option value="RP">Projective Plane</option>
                        <option value="FlatFence">Flat Fence</option>
                    </select>
                </div>


                <label>Lengths <span class="glyphicon glyphicon-info-sign"/></label>
                <div id="x0">
                    <label for="x_len0">x0:</label>
                    <input value='7' type="number" id="quantity" name="quantity" min="0" max="11" id="x_len0">
                </div>
                <div id="x1">
                    <label for="x_len1">x1: </label>
                    <input value='7' type="number" id="quantity" name="quantity" min="0" max="11" id="x_len1">
                </div>
                <div id="x2">
                    <label id="x_len2">x2:</label>
                    <input value='7' type="number" id="quantity" name="quantity" min="0" max="11" id="x_len2">
                </div>
                <div id="x3">
                    <label id="x_len2">x3:</label>
                    <input value='7' type="number" id="quantity" name="quantity" min="0" max="11" id="x_len2">
                </div>
                <div>
                    <button id="rest" type="button" class="btn btn-success">Reset Lattice</button>
                </div>

                <script>
                    function showCorrectDimensionList() {

                        let dim = document.getElementById("dim").value; // another component
                        switch (dim) {
                            case "1":
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x0").style.visibility = "hidden";
                                document.getElementById("x2").style.visibility = "hidden";
                                document.getElementById("x3").style.visibility = "hidden";
                                break;
                            case "2":
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x2").style.visibility = "hidden";
                                document.getElementById("x3").style.visibility = "hidden";
                                break;
                            case "3" :
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x2").style.visibility = "visible";
                                document.getElementById("x3").style.visibility = "hidden";
                                break;
                            case "4" :
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x0").style.visibility = "visible";
                                document.getElementById("x2").style.visibility = "visible";
                                document.getElementById("x3").style.visibility = "visible";
                                break;
                        }


                    }

                    showCorrectDimensionList();
                </script>
            </div>


            <div class="well">
                <div>
                    <label>poke</label>
                </div>
                <div>
                    <label for="c0">x0:</label>
                    <input value="0" type="number" id="c0" name="c0" min="0" max="11" style="width: 80px;">

                    <label for="c1">x1: </label>
                    <input value="0" type="number" id="c1" name="c1" min="0" max="11" style="width: 80px" ;>

                    <label for="c2">x2:</label>
                    <input value="0" type="number" id="c2" name="c2" min="0" max="11" style="width: 80px" ;>

                    <button id="btnPoke" type="button" class="btn btn-success" onclick="pokeState()">Set State</button>

                    <button id="btnNbhrs" type="button" class="btn btn-success" onclick="getNBHRS()">NBHRS</button>

                    <button id="btnAllOn" type="button" class="btn btn-success" onclick="WalkOn()">WalkOn</button>
                    <button id="btnAllOff" type="button" class="btn btn-success" onclick="WalkOff()">WalkOff</button>
                </div>

                <script>
                    function pokeState() {
                        let x = parseInt(document.getElementById("c0").value)
                        let y = parseInt(document.getElementById("c1").value)
                        let z = parseInt(document.getElementById("c2").value)
                        let state = true
                        APP.World.setCellState(x, y, z, state)
                    }

                    function getNBHRS() {
                        let x = parseInt(document.getElementById("c0").value)
                        let y = parseInt(document.getElementById("c1").value)
                        let z = parseInt(document.getElementById("c2").value)

                        let nbhrs = APP.World.getCellNeighbors(x, y, z);
                        console.log(nbhrs);
                        nbhrs.forEach(n => {
                            APP.World.renderCell(n.x,n.y,n.z,"#000000", .75)
                            console.log(n);
                        })
                        //APP.Render();
                    }

                    function WalkOn (){
                        SetStateOnAll(true);
                    }
                    function WalkOff (){
                        SetStateOnAll(false);
                    }

                    function SetStateOnAll(state){
                        for ( let x =0; x < APP.World.gridSizeX ; x++){
                            for ( let y =0 ; y < APP.World.gridSizeY ; y++){
                                for ( let z =0 ; z < APP.World.gridSizeX ; z++){
                                    APP.World.setCellState(x,y,z,state)
                                }
                            }
                        }
                    }
                </script>
            </div>

            <!-- composite component -->
            <div class="well">

                <!-- component -->
                <div>Scene</div>
                <div class="well">

                    <input id="sceneBackgroundColor" type="color" name="sceneBackgroundColor" value="#e66465"
                           onchange="handleBgColorOnChange()">
                    <label for="sceneBackground">Background Color</label>

                    <div>
                        <input id="showPlane" type="checkbox" name="showPlane" value="false"
                               onchange="handleShowPlaneOnChange()">
                        <label for="showPlane">Show Plane</label>
                    </div>

                    <div>
                        <input id="showAxis" type="checkbox" name="showAxis" value="false"
                               onchange="handleShowAxisOnChange()">
                        <label for="showPlane">Show Axis</label>
                    </div>

                    <div>
                        <input type="checkbox" id="showWireFrame" name="showWireFrame" value=false
                               onchange="handleLShowWiresOnChange()">
                        <label for="showWireFrame">Show OpenGL Wire</label><br>
                    </div>

                    <input id="showCellEdges" type="checkbox" name="wireFrame" value=false
                           onchange="handleCubeBoundary()">
                    <label for="showCellEdges">Show Cell Edges</label><br>

                    <script>

                        let handleBgColorOnChange = (e) => {
                            APP.backgroundColor = document.getElementById('sceneBackgroundColor').value;
                            console.log(`onchange live cell color ${document.getElementById('sceneBackgroundColor').value}`);
                            APP.Render();
                        }

                        let handleShowPlaneOnChange = (e) => {
                            APP.showPlane = document.getElementById('showPlane').selected;
                            console.log(`onchange show plane ${document.getElementById('showPlane').selected}`);
                            APP.Render();
                        }
                        let handleShowAxisOnChange = (e) => {
                            APP.showAxis = document.getElementById('showAxis').selected;
                            console.log(`onchange show axis ${document.getElementById('showAxis').selected}`);
                            APP.Render();
                        }

                        let handleLShowWiresOnChange = (e) => {
                            let isShowWire = document.getElementById('showWireFrame').selected;
                            APP.showWire = isShowWire;
                            console.log(`onchange show opengl wires ${document.getElementById('showWireFrame').selected}`);
                            APP.Render();
                        }

                        let handleCubeBoundary = (e) => {
                            let showCubeEdges = document.getElementById('showCellEdges').selected;
                            APP.showCubeEdges = showCubeEdges;
                            console.log(`onchange show cube edges  ${showCubeEdges}`);
                            APP.Render();
                        }

                    </script>

                </div>

                <!-- component -->
                <div>Living Cell</div>
                <div class="well">

                    <input id="liveCellColor" type="color" name="liveCell" value="#e66465"
                           onchange="handleLiveColorOnChange()">
                    <label for="liveCellColor">Color</label>

                    <label for="slideDeadCallOpacity">Opacity</label>
                    <input id="liveCellOpacity" type="range" min="1" max="100" value="50" class="slider"
                           onchange="handleLiveOpacitySliderOnChange()">

                    <script>
                        let handleLiveColorOnChange = (e) => {
                            APP.cellOnColor = document.getElementById('liveCellColor').value;
                            console.log(`onchange live cell color ${document.getElementById('liveCellColor').value}`);
                            APP.Render();
                        }

                        let handleLiveOpacitySliderOnChange = (e) => {
                            // cellOpacityOn
                            APP.cellOpacityOn = document.getElementById('liveCellOpacity').value;
                            APP.Render();
                            console.log(`onchange live cell opacity ${document.getElementById('liveCellOpacity').value}`);
                        }

                    </script>

                </div>

                <!-- component -->
                <div>Dead Cell</div>
                <div class="well">

                    <input id="showDeadCells" type="checkbox" name="deadCells" value=true"
                           onchange="handleHideDeadCellOnChange()">
                    <label for="showDeadCells">Show</label><br>

                    <input id="deadCellColor" type="color" name="deadCell" value="#f6b73c"
                           onchange="handleOnChangeDeadCellColor">
                    <label for="deadCellColor">Color</label>

                    <lable for="slideDeadCallOpacity">Opacity</lable>
                    <input id="deadCellOpacity" class="slider" type="range" min="1" max="100" value="50"
                           onchange="handleDeadCellOpacitySliderOnChange()">

                    <script>

                        let handleHideDeadCellOnChange = (e) => {
                            APP.showOffCell = document.getElementById('showDeadCells').checked;
                            APP.Render();
                            console.log(`onchange dead show  ${document.getElementById('showDeadCells').checked}`)
                        }

                        let handleDeadCellOpacitySliderOnChange = (e) => {
                            APP.cellOpacityOff = document.getElementById('deadCellOpacity').value;
                            APP.Render();
                            console.log(`onchange dead cell opacity ${document.getElementById('deadCellOpacity').value}`);
                        }


                        let handleOnChangeDeadCellColor = (e) => {
                            // cellOpacityOn
                            APP.cellOnColor = document.getElementById('deadCellColor').value;
                            APP.Render();
                            console.log(`onchange dead cell color ${document.getElementById('deadCellColor').value}`);
                        }
                    </script>

                </div>


            </div>


        </div>

    </div>
</div>

<!--<div class="container" id="container" >-->
<div id="container">


    <!--    <nav class="navbar navbar-inverse navbar-fixed-bottom">-->

    <!--&lt;!&ndash;        <ul class="nav navbar-nav">&ndash;&gt;-->
    <!--&lt;!&ndash;            <li><a onclick="tooggl()"><span class="glyphicon glyphicon-th-list"></span> Define</a></li>&ndash;&gt;-->
    <!--&lt;!&ndash;            <li><a onclick="APP.Start( GetStepDelay() );"><span class="glyphicon glyphicon-play"></span> Start</a></li>&ndash;&gt;-->
    <!--&lt;!&ndash;            <li><a onclick="APP.Next( );"><span class="glyphicon glyphicon-step-forward"></span> Next</a></li>&ndash;&gt;-->
    <!--&lt;!&ndash;            <li><a onclick="APP.Stop();"><span class="glyphicon glyphicon-stop"></span> Stop</a></li>&ndash;&gt;-->
    <!--&lt;!&ndash;            <li><a onclick="APP.Reset();"><span class="glyphicon glyphicon-refresh"></span> Reset</a></li>&ndash;&gt;-->
    <!--&lt;!&ndash;            <li class=".float-right"><a id="toggleFullScene"> <span class="glyphicon  glyphicon-resize-full"&ndash;&gt;-->
    <!--&lt;!&ndash;                                                                    aria-hidden="true"/></a></li>&ndash;&gt;-->
    <!--&lt;!&ndash;        </ul>&ndash;&gt;-->

    <!--    </nav>-->
</body>
</html>


<script src="dist/bundle.js"></script>

<script>
    let UI = {
        isRightMenuVisible: false
    }

    /* Open when someone clicks on the span element */
    function openNav() {
        document.getElementById("myNav").style.width = "20%";
    }

    /* Close when someone clicks on the "x" symbol inside the overlay */
    function closeNav() {
        document.getElementById("myNav").style.width = "0%";
    }

    function toggleRightMenu() {

        UI.isRightMenuVisible = !UI.isRightMenuVisible
        UI.isRightMenuVisible ? openNav() : closeNav();


    }

    function GetStepDelay() {
        return $('#stepDelay').val();
    }


    function manageRules() {
        $('#define_automa').toggle();
    }


</script>